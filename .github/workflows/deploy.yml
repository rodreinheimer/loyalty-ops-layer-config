name: Delta Deploy
on:
  pull_request:
    types: 
      - closed
    branches:
      - main
      - develop
jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'develop' }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      BUILD_KEY: ${{ github.sha }}

    steps: 
      - name: Get Configuration Repo
        uses: actions/checkout@v4
        with:
          path: build/loyalty-ops-layer-config

      - name: Package Configuration Layer
        run: |
          cd build/loyalty-ops-layer-config/nodejs
          find . -maxdepth 1 -mindepth 1 -type d | while IFS= read -r line; do echo `cp default.js ${line}`; done
          cd ../
          zip -vr layer_delta_${{ env.BUILD_KEY }}_${{ vars.ENV_NAME }}.zip nodejs/ -x "*.DS_Store"

      - name: Clean Up Build Directory
        run: |
          cd build/loyalty-ops-layer-config/nodejs
          find . -maxdepth 1 -mindepth 1 -type d | while IFS= read -r line; do echo `rm -f ${line}/default.js`; done

      - name: Upload Layer Assets
        uses: actions/upload-artifact@v3
        with:
          name: build_assets
          path: build/loyalty-ops-layer-config/layer_delta_${{ env.BUILD_KEY }}_${{ vars.ENV_NAME }}.zip

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'develop' }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ENV_NAME: ${{ vars.ENV_NAME }}
      PR_NUMBER: ${{ github.event.number }}
      BUILD_KEY: ${{ github.sha }}

    steps:
      - name: Get Configuration Repo
        uses: actions/checkout@v4

      - name: Get Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build_assets
          path: ./build_assets

      - name: Add Label to PR 2
        if: env.PR_NUMBER
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let issue_number = ${{ env.PR_NUMBER }};
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              labels: ['${{ vars.APP_DEPLOYING_LABEL }}']
            });

      - name: Update Layer
        id: upload
        uses: ./.github/actions/aws-lambda-layer-load
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          bucket-name: ${{ vars.DEPLOYMENT_BUCKET }}
          bucket-region: ${{ env.AWS_REGION }}
          dist-folder: ./build_assets

      - name: Publish Layer
        id: publish
        uses: ./.github/actions/aws-lambda-layer-publish
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          bucket-name: ${{ vars.DEPLOYMENT_BUCKET }}
          zip-file-name: layer_delta_${{ env.BUILD_KEY }}_${{ vars.ENV_NAME }}.zip
          layer-name: loyalty-ops-configurations-${{ vars.ENV_NAME }}
          layer-description: Loyalty report and monitors configurations.
          function-name: loyalty-ops-function-report-purchase-registration-dev
          
      - name: Output Info
        run: |
          echo "layer-version-arn=${{steps.publish.outputs.layer-version-arn}}\n" >> $GITHUB_OUTPUT
          echo "release-layer-arns=${{steps.publish.outputs.release-layer-arns}}\n" >> $GITHUB_OUTPUT

      - name: Successful Deploy
        if: success() && env.PR_NUMBER
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let fs = require('fs');
            let issue_number = ${{ env.PR_NUMBER }};
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `App build succeeded
              ${{join(steps.run_tests.outputs.*, '\n')}}`
            });
            await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              name: '${{ vars.APP_DEPLOYING_LABEL }}'
            });
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              labels: ['${{ vars.APP_DEPLOYED_LABEL }}']
            });

      - name: Failed Deploy
        if: failure() && env.PR_NUMBER
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let fs = require('fs');
            let issue_number = ${{ env.PR_NUMBER }};
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `App build failed
              ${{join(steps.run_tests.outputs.*, '\n')}}`
            });
            await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              name: '${{ vars.APP_DEPLOYING_LABEL }}'
            });
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              labels: ['${{ vars.APP_FAILURE_LABEL }}']
            });
